// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MariaDBContext))]
    [Migration("20230621230554_AddIdentity")]
    partial class AddIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Models.Entity.AccessEventModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DoorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("AccessEvents");
                });

            modelBuilder.Entity("Domain.Models.Entity.AccessPointModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RequiredAccessLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccessPoints");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe58ff46-66ae-406b-9677-96ac8dca9c8a"),
                            Name = "Entrance",
                            RequiredAccessLevel = 0
                        },
                        new
                        {
                            Id = new Guid("20291a0d-58fc-400e-83fa-1d6fe5a47889"),
                            Name = "Store Room",
                            RequiredAccessLevel = 3
                        },
                        new
                        {
                            Id = new Guid("e2baf6e6-452f-4890-a21a-988bd9887d75"),
                            Name = "Directors Boardroom",
                            RequiredAccessLevel = 4
                        });
                });

            modelBuilder.Entity("Domain.Models.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserModelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Models.Entity.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HasReportAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6734aeb5-8fdb-4b71-938f-f719defde846"),
                            AccessLevel = 5,
                            EmailAddress = "",
                            FullName = "Kevin (The Boss)",
                            HasReportAccess = true
                        },
                        new
                        {
                            Id = new Guid("ebe628a5-b48a-4fcc-92d5-3c5ba4929e82"),
                            AccessLevel = 3,
                            EmailAddress = "",
                            FullName = "Jessica",
                            HasReportAccess = true
                        },
                        new
                        {
                            Id = new Guid("0e78642e-4c74-4d66-ac5c-c53d0d93a719"),
                            AccessLevel = 2,
                            EmailAddress = "",
                            FullName = "Alex",
                            HasReportAccess = false
                        });
                });

            modelBuilder.Entity("Domain.Models.Entity.Role", b =>
                {
                    b.HasOne("Domain.Models.Entity.UserModel", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("Domain.Models.Entity.UserModel", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
