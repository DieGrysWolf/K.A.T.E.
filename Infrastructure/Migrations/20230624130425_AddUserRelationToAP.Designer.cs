// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MariaDBContext))]
    [Migration("20230624130425_AddUserRelationToAP")]
    partial class AddUserRelationToAP
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Models.Entity.AccessEventModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DoorId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Success")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("AccessEvents");
                });

            modelBuilder.Entity("Domain.Models.Entity.AccessPointModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("RequiredAccessLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccessPoints");
                });

            modelBuilder.Entity("Domain.Models.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("UserModelId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserModelId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Models.Entity.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<Guid?>("AccessPointModelId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("HasReportAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex("AccessPointModelId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Entity.Role", b =>
                {
                    b.HasOne("Domain.Models.Entity.UserModel", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("Domain.Models.Entity.UserModel", b =>
                {
                    b.HasOne("Domain.Models.Entity.AccessPointModel", null)
                        .WithMany("RegisteredUsers")
                        .HasForeignKey("AccessPointModelId");
                });

            modelBuilder.Entity("Domain.Models.Entity.AccessPointModel", b =>
                {
                    b.Navigation("RegisteredUsers");
                });

            modelBuilder.Entity("Domain.Models.Entity.UserModel", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
